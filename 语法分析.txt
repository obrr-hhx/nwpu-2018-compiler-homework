# 语法分析

## 产生式：

### 变量定义结构

<program> -> <segment> <program> | ε

<segment> -> KW_EXTERN <type> <def> | <type> <def>

<type> -> KW_INT | KW_VOID | KW_CHAR

<def> -> <defdata><deflist>

<defdata> -> ID <varrdef> | MUL ID <init>

<varrdef> -> LBRACK NUM RBRACK | <init>

<init> -> ASSIGN <expr> | ε

<deflist> -> COMMA <defdata> <deflist> | SEMICON

---

### 函数声明和定义

<fun> -> ID LPAREN <para> RPAREN <funtail>

<funtail> -> SEMICON | <block>

此时将<fun>加入<def>的产生式后面

<def> -> <defdata><deflist> | <fun>

其中有左公因式，展开提取

<def> -> ID <varrdef><deflist> | MUL ID <init><deflist> | ID LPAREN <para> RPAREN <funtail>

<def> -> ID <idtail> | MUL ID <init><deflist>

<idtail> -> <varrdef><deflist> | LPAREN <para> RPAREN <funtail>

故而 <def>的完整产生式为：

<def> -> ID <idtail> | MUL ID <init><deflist>

<idtail> -> <varrdef><deflist> | LPAREN <para> RPAREN <funtail>

<funtail> -> SEMICON | <block>

(没有允许返回类型是指针的函数)

---

### 函数形式参数

参数约束：

- 形式参数名称不能省略
- 形式参数不允许有默认值
- 数组参数必须制定数组大小

<paradata> -> MUL ID | ID <paradatatail>

<paradatatail> -> LBRACK NUM RBRACK | ε

<paralist> -> COMMA <type><paradata><paralist> | ε

<para> -> <type><paradata><paralist> | ε

---

### 函数体

<block> -> LBRACE <subprogram> RBRACE

<subprogram> -> <localdef><subprogram> | <statement><subprogram> | ε

<localdef> -> <type><defdata><deflist>

先描述表达式的文法，再讨论<statement>的产生式

#### 根据表达式操作符的优先级从低到高构建文法

赋值表达式<assexpr>

<assexpr> -> <orexpr><asstail>

<asstail> -> ASSIGN <orexpr><asstail> | ε

‘或’表达式<orexpr>

<orexpr> -> <andexpr><ortail>

<ortail> -> OR <andexpr><ortail> | ε

'与'表达式<andexpr>

<andexpr> -> <cmpexpr><andtail>

<andtail> -> AND <cmpexpr><andtail> | ε

关系表达式<cmpexpr>

<cmpexpr> -> <aloexpr><cmptail>

<cmptail> -> <cmps><aloexpr><cmptail> | ε

<cmps> -> GT | GE | LT | LE | EQU | NEQU

算数表达式<aloexpr> 运算符为 ADD | SUB

<aloexpr> -> <item><alotail>

<alotail> -> <adds><item><alotail> | ε

<adds> -> ADD | SUB

项表达式<item> 运算符为 MUL | DIV | MOD

<item> -> <factor><itemtail>

<itemtail> -> <muls><factor><itemtail> | ε

<muls> -> MUL | DIV | MOD

因子表达式<factor> 运算符为 NOT | SUB | LEA | MUL | INCR | DECR

因子表达式可以是值表达式，因子表达式中，运算符出现在操作数的左侧

<factor> -> <lop><factor> | <val>

<lop> -> NOT | SUB | LEA | MUL | INCR | DECR

值表达式<val> 运算符为 INCR | DECR

运算符出现在操作数右侧，且只能出现一次

<val> -> <elem><rop>

<rop> -> INCR | DECR ｜ε

元素表达式<elem> 表达式的基本操作数单元

参与表达式运算的操作有变量，数组，函数调用，括号表达式，常量

<elem> -> ID | ID LBRACK <expr> RBRACK | ID LPAREN <realarg> RPAREN | LPAREN <expr> RPAREN | <literal>

提取左公因式ID

<elem> -> ID <idexpr> | LPAREN <expr> RPAREN | <lieral>

<idexpr> -> LBRACK <expr> RBRACK | LPAREN <realarg> RPAREN | ε

函数调用的参数列表其实就是由逗号组成的表达式列表或者为空

<realarg> -> <arg><arglist> | ε

<arglist> - > COMMA <arg><arglist> | ε

<arg> -> <expr>

<literal> -> NUM | CH | STR

赋值表达式文法构造完成，由于没有比赋值更低的运算，因此表达式直接用赋值表达式表示

<expr> -> <assexpr>

循环语句中表达式可能为空，故而使用非终结符<altexpr>表示可能为空的表达式

<altexpr> -> <expr> | ε

#### 语句

<statement> -> <altexpr> SEMICON | <whilestat> | <forstat> | <dowhilestat> | <ifstat> | <switchstat> | KW_BREAK SEMICON | KW_CONTINUE SEMICON | KW_RETURN <altexpr> SEMICON

while循环语句

<whilestat> -> KW_WHILE LPAREN <altexpr> RPAREN <block>

dowhile循环语句

<dowhilestat> -> KW_DO <block> KW_WHILE LPAREN <altexpr> RPAREN SEMICON

for循环语句

<forstat> -> KW_FOR LPAREN <forinit><altexpr> SEMICON <altexpr> RPAREN <block>

<forinit> -> <localdef> | <altexpr> SEMICON

if语句

<ifstat> -> KW_IF LPAREN <expr> RPAREN <block><elsestat>

<elsestat> -> KW_ELSE <block> | ε

switch语句

<switchstat> -> KW_SWITCH LPAREN <expr> RPAREN LBRACE <casestat> RBRACE

<casestat> -> KW_CASE <caselabel> COLON <subprogram><casestat> | KW_DEFAULT COLON <subprogram>

<caselable> -> <literal>

一个结论：**表达式为程序提供真正的计算，语句为程序提供控制流程，函数为程序提供功能封装，全局变量为程序提供信息共享**

